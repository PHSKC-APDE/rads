---
title: 'Leading Causes of Hospitalization'
format: html
editor: visual
---

## **Six Steps to Identifying the Leading Causes of Hospitalization**

### Some important notes before we begin

```{r}
#| echo: false
ccs <- rads::chars_icd_ccs(icdcm_version = 10)
```

-   In early 2024, APDE created a generalized reference table for categorizing ICD-9/10-CM codes (`kcitazrhpasqlprp16.azds.kingcounty.gov` \>\> `[hhs_analytics_workspace].[ref].[icdcm_codes]`). This table, accessible through `rads::chars_icd_ccs()`, was designed to ensure uniformity in analyzing claims data across various projects, including analyses of the leading causes of hospitalization.

-   The [AHRQ](https://www.ahrq.gov/) sponsors the [Healthcare Cost and Utilization Project (HCUP)](https://hcup-us.ahrq.gov/), a Federal-State-Industry partnership which develops databases and software tools for health care data. HCUP developed the '[Clinical Classifications Software Refined (CCSR)](https://hcup-us.ahrq.gov/toolssoftware/ccsr/dxccsr.jsp) for ICD-10-CM diagnoses, which aggregates more than 70,000 ICD-10-CM diagnosis codes into over 530 clinically meaningful categories.' The CCSR is the inspiration for the 'CCS' table available through `rads::chars_icd_ccs()` / `[ref].[icdcm_codes]`. As of `r format(Sys.time(), '%B %d, %Y')`, the CCS table provides the aggregation of `r format(nrow(rads::chars_icd_ccs(icdcm_version = 9)), big.mark = ',')` ICD-9-CM codes and `r format(nrow(ccs), big.mark = ',')` ICD-10-CM codes into `r data.table::uniqueN(ccs$superlevel)` `superlevel`, `r data.table::uniqueN(ccs$broad)` `broad` level, `r data.table::uniqueN(ccs$midlevel)` `midlevel`, and `r data.table::uniqueN(ccs$detailed)` `detailed` level categories.

-   The CCS `detailed` level categorizations form the basis for our leading causes of hospitalization analyses because they most closely resemble those used in [AHRQ](https://www.ahrq.gov/) publications on the same topic (e.g., [this 2018 report)](https://hcup-us.ahrq.gov/reports/statbriefs/sb277-Top-Reasons-Hospital-Stays-2018.pdf). However, when calculating the leading causes of hospitalization, there are two necessary modifications to the `detailed` categorization. First, consistent with AHRQ's approach in examining '*non-maternal, non-neonatal inpatient stays*', we omit all hospitalizations related to pregnancy and childbirth. Second, following historical discussions with our community partners, it was agreed that the *intent* of injuries holds more significance than the *mechanism*. Consequently, we employ an injury matrix to count injuries by their *intent*, and we exclude injuries from the main analysis to avoid duplicative counting.

-   This is the protocol for the leading causes of *inpatient hospitalization.* You should ***NOT*** necessarily follow this protocol for leading causes of ED visits or customized claims analyses.

-   Additional relevant information regarding analysis of hospitalization data may be available in the [APDE Analysis Guide](https://kc1.sharepoint.com/:w:/r/teams/DPH-APDEData/_layouts/15/Doc.aspx?sourcedoc=%7BA49D6E2C-6FF4-49E9-95D4-7AE7B2C34E5D%7D&file=APDE_Analysis_Guide.docx&action=default&mobileredirect=true).

-   The [CHARS directory in the CHI repo](https://github.com/PHSKC-APDE/chi/tree/main/chars) has the code used to create the leading causes of death for CHNA / CHI. It is somewhat complex because of the various iterations needed for these projects. However, underneath the complexity, it *should* follow the structure described above.

### Overview

The code below provides an example of how to conduct a leading causes of hospitalization analysis using RADS. For the sake of simplicity, we limit the stratification to gender (female & male) for the years 2017 to 2021.

This protocol has six steps:

1.  Set up R

2.  Get data

3.  Get counts

4.  Merge population data onto counts

5.  Calculate age standardized rates

6.  Identify top 10 leading causes based on counts

## (1) Set up R

```{r}
#| warning: false

rm(list=ls())
library(rads)
library(data.table)
```

## (2) Get data

Pull the relevant years of inpatient data from SQL ...
```{r}
#| warning: false

chars <- get_data_chars(year = 2017:2021, kingco = TRUE)
```

Split off the the chars data that will be used with `rads::chars_injury_matrix_count()`
```{r}
#| warning: false
# Identify and save the external cause data
chars_injury <- chars[injury_nature_narrow == 1 &
                        !is.na(injury_intent) &
                        !is.na(injury_mechanism)]
```

Split off the the chars data that will be used with `rads::chars_icd_ccs_count`
```{r}
#| warning: false
# Identify and save the non-external cause data
chars_non_injury <- chars[!(injury_nature_narrow == 1 &
                              !is.na(injury_intent) &
                              !is.na(injury_mechanism))]
```

## (3) Get counts
### Get counts irrespective of cause

```{r}
#| warning: false
counts_any <- chars[, .(hospitalizations = .N), 
                    .(chi_sex, chi_age)]

counts_any <- counts_any[, .(cause_category = 'All causes', 
                             cause = 'All causes', 
                             gender = chi_sex, 
                             age = chi_age, 
                             hospitalizations)]
```

### Get counts of external causes *by intent*

```{r}
#| warning: false

counts_intent <- rads::chars_injury_matrix_count(
  ph.data = chars_injury, 
  intent = '*', # all intents
  mechanism = 'none', # ignore mechanism
  group_by = c('chi_sex', 'chi_age'), 
  def = 'narrow', 
  primary_ecode = TRUE, 
  kingco = TRUE
)
```

Let's confirm that we accounted for every external injury ...
```{r}
identical(
  as.integer(sum(counts_intent[mechanism == 'Any mechanism' & intent == 'Any intent']$hospitalizations)), 
  nrow(chars_injury)
)
```


### Get counts of CCS `detailed` causes

First, generate the actual CCS `detailed` counts.
```{r}
#| warning: false

counts_ccs <- rads::chars_icd_ccs_count(
  ph.data = chars_non_injury,
  icdcm_version = 10,
  icdcm = NULL,
  detailed = '', # all possible detailed causes
  icdcol = 'diag1',
  group_by = c('chi_sex', 'chi_age'),
  kingco = TRUE,
  mykey = 'hhsaw'
)
```

Let's confirm that we accounted for every non-injury hospitalization ...
```{r}
identical(
  as.integer(sum(counts_ccs$hospitalizations)), 
  nrow(chars_non_injury)
)
```

Now, identify a vector of the 'detailed' causes of interest. There is no need to exclude injury related causes from this vector because they were excluded due to partitioning the data in Step 2.

```{r}
#| warning: false
# Get table of CCS detailed values that will be subset
detailed.causes <- unique(rads::chars_icd_ccs()[, .(superlevel, broad, midlevel, detailed)])

# Exclude birth (maternal & neonatal) related hospitalizations
detailed.causes <- detailed.causes[superlevel != 'Pregnancy or birth complications'] 

# Create a vector of detailed causes
detailed.causes <- detailed.causes$detailed
```

Finally, subset the CCS counts to the `detailed` causes of interest

```{r}
#| warning: false
counts_ccs <- counts_ccs[detailed_desc %in% detailed.causes]
```


### Combine counts

```{r}
#| warning: false

# Tidy CCS table
counts_ccs <- merge(counts_ccs, 
                    unique(rads::chars_icd_ccs()[, .(detailed, superlevel)]), # merge on superlevel
                    by.x = 'detailed_desc', by.y = 'detailed', 
                    all.x = TRUE, all.y = FALSE)
counts_ccs <- counts_ccs[, .(cause_category = superlevel, 
                             cause = detailed_desc, 
                             gender = chi_sex, 
                             age = chi_age, 
                             hospitalizations)]

# Tidy external cause intent table
counts_intent <- counts_intent[, .(cause_category = 'Injuries', 
                                   cause = intent, 
                                   gender = chi_sex, 
                                   age = chi_age, 
                                   hospitalizations)]
counts_intent <- counts_intent[cause != 'Any intent'] 

# Append CCS & intent count tables
counts <- rbind(counts_any, 
                counts_ccs, 
                counts_intent)

# Drop if missing gender because cannot merge with population
counts <- counts[!is.na(gender)]

# Make sure age is an integer for merging with population
counts[, age := as.integer(age)] 
```

Take a peek at the final counts table ...

```{r}
#| echo: true
#| warning: false

head(counts); tail(counts)
```

### Ensure the count table has a row for every permutation of factors

When you generated `counts_any` above, there was no guarantee that you had a count for *every* age and gender. The code below will ensure that our count table has every possible logical combination of our categorical variables with `hospitalizations == 0` when there were no events.

```{r}
#| warning: false

# Get unique components for creation of dummy table
category_cause <- unique(counts[, .(cause_category, cause)]) 
gender_age <- CJ(gender = unique(counts$gender), age = 0:100) # cross join gender & age

# Generate the dummy table
dummy <- merge(category_cause[, constant := 1], 
               gender_age[, constant := 1], 
               by = 'constant', # constant will merge all rows
               all = TRUE, 
               allow.cartesian = TRUE)[, constant := NULL]

# Merge counts onto the dummy table
counts <- merge(dummy, 
                counts, 
                by = c('cause_category', 'cause', 'gender', 'age'),
                all = TRUE)

# Fill in any NA hospitalization values with 0
counts[is.na(hospitalizations), hospitalizations := 0]
```

## (4) Merge corresponding population onto the count data

Be sure that your call to rads::get_population provides the same years and demographic strata that you have in your death counts!

```{r}
#| warning: false

# Get corresponding population
pop <- get_population(years = 2017:2021, group_by = c('genders', 'ages'))
pop <- pop[, .(pop, age, gender)]

# Merge the population data onto the count data
combo <- merge(counts, 
               pop, 
               by = c('age', 'gender'), 
               all = TRUE)
```

## (5) Calculate age standardized rates

```{r}
#| warning: false

rates <- rads::age_standardize(
  ph.data = combo, 
  my.count = 'hospitalizations', 
  my.pop = 'pop', 
  group_by = c('gender', 'cause', 'cause_category')
)
rates <- rates[, reference_pop := NULL]
```

Take a peek at the rates ...

```{r}
#| echo: true
#| warning: false

head(rates)
```

## (6) Identify leading causes based on COUNTS (using random ties method)

```{r}
#| warning: false

# Create ranking (minus one, because want 'All causes' to have a rank of zero)
ranking <- rates[, ranking := frank(-count, ties.method = 'dense') -1, .(gender)]

# Keep top 10 rankings
ranking <- ranking[ranking %in% 0:10]

# Sort the data by gender and ranking
setorder(ranking, gender, ranking)

# Keep the columns of interest
ranking <- ranking[, .(gender, 
                       ranking, 
                       cause_category, 
                       cause, 
                       count,  
                       rate = adj.rate, 
                       rate_lower = adj.lci, 
                       rate_upper = adj.uci)]
```

View the top three leading causes of hospitalization by gender ...

```{r}
#| echo: true
#| warning: false

print(ranking[, .SD[1:4], gender])
```

## :star2: Finished!

-- *`r paste0('Updated by ', Sys.getenv('USERNAME'), ', ', format(Sys.time(), '%B %d, %Y'))`*
