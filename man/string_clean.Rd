% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{string_clean}
\alias{string_clean}
\title{Clean string & factor columns}
\usage{
string_clean(ph.data = NULL, stringsAsFactors = FALSE, convert_to_utf8 = FALSE)
}
\arguments{
\item{ph.data}{name of data.frame or data.table}

\item{stringsAsFactors}{logical. Specifies whether to convert strings to
factors (TRUE) or not (FALSE). Note that columns that were originally factors
will always be returned as factors.}

\item{convert_to_utf8}{logical. Specifies whether to convert character strings
to UTF-8 encoding. UTF-8 ensures consistent handling of international characters
and special symbols across different systems and prevents display/processing
errors from incompatible character encodings.}
}
\value{
data.table
}
\description{
\code{string_clean} is designed to clean and preprocess strings and factors within a
data.frame or data.table after importing from SQL, text files, CSVs, etc. It
(optionally) encodes text to UTF-8, trims and replaces multiple whitespaces,
converts blank strings to true NA values, and optionally converts strings to
factors. The function maintains the original order of columns and leaves
numeric and logical columns as they were.
}
\details{
Depending on the size of the data.frame/data.table, the cleaning
process can take a long time.

The \code{string_clean} function modifies objects in place due to the use
of data.table's by-reference assignment (e.g., :=). In other words, there is
\emph{no need to assign the output}, just
type \code{string_clean(myTable)}.
}
\examples{
\donttest{
myTable <- data.table::data.table(
intcol = as.integer(c(1, 2, 3)),
county = c(' King  County ', 'Pierce County', '  Snohomish  county '))
myTable[, county_factor := factor(county)]
string_clean(myTable, stringsAsFactors = TRUE)
print(myTable)
}

}
