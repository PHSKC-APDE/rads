% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{get_xwalk}
\alias{get_xwalk}
\title{Load clean geographic crosswalk tables}
\usage{
get_xwalk(geo1 = NA, geo2 = NA)
}
\arguments{
\item{geo1}{character vector of length 1 defining one half of the crosswalk
desired, e.g., \code{geo1 = 'zip'}}

\item{geo2}{character vector of length 1 defining the other  half of the
crosswalk desired, e.g., \code{geo1 = 'city'}}
}
\value{
a data.table with two columns of geographic identifiers
}
\description{
This function provides a curated assortment of standardized geographic crosswalks.
Though limited in scope, it provides quick and consistent access to many of the
standard crosswalks used in APDE. If there is a common crosswalk missing
among the options in \code{list_ref_xwalk()}, please let us know by posting a detailed
request in a \href{https://github.com/PHSKC-APDE/rads/issues/new}{GitHub issue}.

If you need less common crosswalks that are not available through this function, please
explore the spatial data built into \href{https://github.com/PHSKC-APDE/rads.data}{rads.data},
e.g., \code{rads.data::spatial_geocomp_blk10_kps}. These rads.data tables were
created by many people over many years so you should expect to invest some time
in exploration and data harmonization to prepare your two columns of interest.
}
\details{
A list of all acceptable geographic pairings can be found by typing
\code{list_ref_xwalk()}.

Note that the pairings given as arguments to this function are critical but
the order is not. In other words, \code{get_xwalk(geo1 = 'zip', geo2 = 'city')}
will return the same table as \code{get_xwalk(geo1 = 'city', geo2 = 'zip')}.
\subsection{geo definitions}{
\itemize{
\item \code{blk1}: 2010 Census Block. 15 digit Census GEOID (e.g., 530330110012006).
\itemize{
\item 1-2: State (53 = WA)
\item 3-5: County (033 = King County)
\item 6-11: Tract (011001)
\item 12: Block group (2)
\item 12-15: Block (2006)
}
\item \code{ccd10}: 2010 Seattle City Council Districts
\item \code{city}: King County cities
\item \code{coo10}: 2010 COO places.
\item \code{hra10}: 2010 Health Reporting Areas
\item \code{kc}: King County
\item \code{kccd10}: 2010 King County Council Districts
\item \code{lgd10}: 2010 WA State legislative districts
\item \code{puma10}: 2010 Public Use Microdata Areas
\item \code{region10}: King County regions (North, South, East, & Seattle)
\item \code{scd10}: 2010 King County school districts
\item \code{sea10}: Seattle or KC except Seattle
\item \code{tract10}: 2010 Census Tract. 11 digit Census GEOID.
\item \code{zip}: Zip codes in King County.
\itemize{
\item \emph{Note!} This is different from the 133 zip
codes used with HCA data. To view the latter, please type \code{rads.data::spatial_zip_hca}.
}
}
}

\subsection{A note about error propagation!}{

If you're merging the crosswalk table onto line level data, you can use
\code{rads::calc}, or \code{data.table}, or whatever package you like
for further analysis. However, if you're merging on to pre-aggregated data,
to further collapse/aggregate/sum, you'll need to properly account for error
propagation. Here is a line of \code{data.table} code as an example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{DT[, .(estimate = sum(estimate), stderror = sqrt(sum(stderror)^2)), c(group_by_vars)]
}\if{html}{\out{</div>}}
}
}
\examples{
\dontrun{
 myxwalk <- get_xwalk(geo1 = 'zip', geo2 = 'city')
 myxwalk[]
}
}
